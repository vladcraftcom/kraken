name: release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-matrix:
    name: build ${{ matrix.os }} ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            target: aarch64-apple-darwin
            base_name: kraken-Darwin-arm64
          - os: macos-13
            target: x86_64-apple-darwin
            base_name: kraken-Darwin-x86_64
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            base_name: kraken-Linux-x86_64
          - os: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            base_name: kraken-Linux-arm64
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            base_name: kraken-Windows-x86_64
          - os: windows-2022
            target: aarch64-pc-windows-msvc
            base_name: kraken-Windows-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install cross deps (Linux aarch64)
        if: matrix.os == 'ubuntu-22.04' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV

      - name: Build
        shell: bash
        run: |
          cargo build -r --target ${{ matrix.target }}

      - name: Package artifact
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TARGET="${{ matrix.target }}"
          BASE="${{ matrix.base_name }}"
          BIN_DIR="target/${TARGET}/release"
          # Detect source binary
          SRC_EXE="${BIN_DIR}/kraken"
          case "$TARGET" in
            *windows*) SRC_EXE="${BIN_DIR}/kraken.exe" ;;
          esac
          # Package per OS
          case "${{ matrix.os }}" in
            macos-*)
              OUT_NAME="${BASE}.dmg"
              STAGE="${BIN_DIR}/stage"
              mkdir -p "$STAGE"
              cp "$SRC_EXE" "$STAGE/kraken"
              hdiutil create -volname "Kraken" -srcfolder "$STAGE" -ov -format UDZO "${BIN_DIR}/${OUT_NAME}"
              echo "out_name=${OUT_NAME}" >> $GITHUB_OUTPUT
              echo "out_path=${BIN_DIR}/${OUT_NAME}" >> $GITHUB_OUTPUT
              ;;
            ubuntu-*)
              OUT_NAME="${BASE}.tar.gz"
              (cd "$BIN_DIR" && tar czf "$OUT_NAME" "$(basename "$SRC_EXE")")
              echo "out_name=${OUT_NAME}" >> $GITHUB_OUTPUT
              echo "out_path=${BIN_DIR}/${OUT_NAME}" >> $GITHUB_OUTPUT
              ;;
            windows-*)
              OUT_NAME="${BASE}.exe"
              cp "$SRC_EXE" "${BIN_DIR}/${OUT_NAME}"
              echo "out_name=${OUT_NAME}" >> $GITHUB_OUTPUT
              echo "out_path=${BIN_DIR}/${OUT_NAME}" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.pack.outputs.out_name }}
          path: ${{ steps.pack.outputs.out_path }}

  release:
    needs: build-matrix
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: |
            dist/**/kraken-*.dmg
            dist/**/kraken-*.tar.gz
            dist/**/kraken-*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
